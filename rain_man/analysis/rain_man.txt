2^N has at most N digits, and 11^N has at least N digits. We can observe that there must be at least one valid solution of the form 2^x * 11^(N-x), for some x such that 0 <= x <= N (it's impossible for there to be a value of y for which x = y yields many digits while x = y + 1 yields too few). We can try all possible values of x, compute the exact product for each one (which requires big integer multiplication, which is built into some languages, and may be manually implemented in others), and check whether if has exactly N digits. We could also binary search on x, though that's unnecessary given the constraints.

We can use logarithmic math to compute the number of digits in each product sufficiently accurately, without the need for exact big integer multiplication. In particular, the number of digits in the product of a list of values is equivalent to the sum of base-10 logarithms of those values (rounded up to the nearest integer).
